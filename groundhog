#!/usr/bin/env python3

#GroundHog main file
from sys import *
from math import *
from statistics import mean

def relativeTempEv(temperatures, period):
    #Get the Relative Temperature Evolution
    diff = []
    old = 0
    for index, temp in enumerate(temperatures, 0):
        if index >= (len(temperatures) - period):
            diff.append(temp - old)
        old = temp
    return mean(diff)

def tempIncreaseAvg(temperatures, period):
    #Get the Temperature Increase Average
    actual = len(temperatures) - 1
    return round(((temperatures[actual] - temperatures[actual - period])
    / temperatures[actual - period]) * 100, 0)

def standardDeviation(temperatures, period):
    #Get the Standard Deviation
    return 0

def display(temperatures, period):
    #Display Stats about Temperatures
    r = tempIncreaseAvg(temperatures, period)
    g = relativeTempEv(temperatures, period)
    s = standardDeviation(temperatures, period)
    print("g=" + "{0:.2f}".format(g), "r=" + "{0:.0f}".format(r) + "%",
    "s=" + "{0:.2f}".format(s), sep="\t\t")

def groundhog():
    #main loop for groundhog program
    period = int(argv[1])
    temperatures = []
    while (42):
        temp = input()
        if temp == "STOP":
            break
        try:
            temp = float(temp)
        except ValueError:
            print("INVALID TEMPERATURE")
            continue
        temperatures.append(temp)
        if len(temperatures) <= period:
            print("g=nan", "r=nan%", "s=nan", sep="\t\t")
        else:
            display(temperatures, period)
    print("Temperatures Detection Ended")

def helper():
    #Display Help for launch
    print("SYNOPSIS\n\t./groundhog period\n")
    print("DESCRIPTION\n\tperiod\tthe number of days defining a period")

def main():
    #main
    if len(argv) != 2 or argv[1].isnumeric() == False:
        print("INVALID USAGE")
        helper()
        exit (84)
    elif argv[1] == "-h":
        helper()
    else:
        groundhog()
        return (0)

if __name__ == "__main__":
    main()
