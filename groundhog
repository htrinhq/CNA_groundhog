#!/usr/bin/env python3

#GroundHog main file
from sys import *
from math import *
from statistics import mean
from statistics import pstdev
from statistics import pvariance

def addToList(temp, old, diff):
    #Check value to append to the diff list
    if temp <= old:
        diff.append(0)
    else:
        diff.append(temp - old)

def relativeTempEv(temperatures, period):
    #Get the Relative Temperature Evolution
    diff = []
    for index, temp in enumerate(temperatures, 0):
        if index >= (len(temperatures) - period):
            addToList(temp, old, diff)
        old = temp
    return mean(diff)

def tempIncreaseAvg(temperatures, period):
    #Get the Temperature Increase Average
    actual = len(temperatures) - 1
    return round(((temperatures[actual] - temperatures[actual - period])
    / temperatures[actual - period]) * 100, 0)

def standardDeviation(temperatures, period):
    #Get the Standard Deviation of temperatures sample
    sample = []
    for index, temp in enumerate(temperatures, 0):
        if index >= (len(temperatures) - period):
            sample.append(temp)
    return pstdev(sample)

def getSwitch(val):
    #Save Temperature change value
    actual = len(getSwitch.value)
    getSwitch.value.append(val)
    if len(getSwitch.value) >= 2 and ((getSwitch.value[actual] >= 0 and 
    getSwitch.value[actual - 1] < 0) or 
    (getSwitch.value[actual] < 0 and getSwitch.value[actual - 1] >= 0)):
        getSwitch.count += 1
        return True
    else:
        return False

getSwitch.value = []
getSwitch.count = 0

def display(temperatures, period):
    #Display Stats about Temperatures
    r = tempIncreaseAvg(temperatures, period)
    g = relativeTempEv(temperatures, period)
    s = standardDeviation(temperatures, period)
    if getSwitch(r) == True:
        print("g=" + "{0:.2f}".format(g), "r=" + "{0:.0f}".format(r) + "%",
        "s=" + "{0:.2f}".format(s), "a switch occurs", sep="\t\t")
    else:
        print("g=" + "{0:.2f}".format(g), "r=" + "{0:.0f}".format(r) + "%",
        "s=" + "{0:.2f}".format(s), sep="\t\t")

def chooseDisplay(temperatures, period):
    #Select correct output to display
    if len(temperatures) < period:
        print("g=nan", "r=nan%", "s=nan", sep="\t\t")
    elif len(temperatures) == period:
        print("g=nan", "r=nan%", "s=" +
        "{0:.2f}".format(standardDeviation(temperatures, period)), sep="\t\t")
    else:
        display(temperatures, period)

def groundhog():
    #main loop for groundhog program
    period = int(argv[1])
    temperatures = []
    while (42):
        temp = input()
        if temp == "STOP":
            break
        try:
            temp = float(temp)
        except ValueError:
            print("INVALID TEMPERATURE")
            continue
        temperatures.append(temp)
        chooseDisplay(temperatures, period)
    print("Global tendency switched " + str(getSwitch.count) + " times")

def helper():
    #Display Help for launch
    print("SYNOPSIS\n\t./groundhog period\n")
    print("DESCRIPTION\n\tperiod\tthe number of days defining a period")

def main():
    #main
    if len(argv) != 2 or argv[1].isnumeric() == False:
        print("INVALID USAGE")
        helper()
        exit (84)
    elif argv[1] == "-h":
        helper()
    else:
        groundhog()
        return (0)

if __name__ == "__main__":
    main()
